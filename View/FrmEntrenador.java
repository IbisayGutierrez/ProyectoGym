/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package View;

import Controller.EntrenadorController;
import Modelo.Entrenador.Entrenador;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author andre
 */
public class FrmEntrenador extends javax.swing.JInternalFrame {
 private DefaultTableModel tableModel;
 private TableRowSorter<DefaultTableModel> rowSorter;
 private List<Entrenador> entrenadores;
    /**
     * Creates new form FrmEntrenador
     */
    public FrmEntrenador() {
        initComponents();
        this.setSize(800, 600); 
        this.setResizable(true);
        entrenadores = new ArrayList<>();
        tableModel = (DefaultTableModel) TbEntrenadores.getModel();
        rowSorter = new TableRowSorter<>(tableModel);
        TbEntrenadores.setRowSorter(rowSorter);
        
    }
    private void updateTable() {
     tableModel.setRowCount(0); // Limpiar datos existentes

        for (Entrenador entrenador : entrenadores) {
            tableModel.addRow(new Object[]{
                entrenador.getId(),
                entrenador.getNombre(),
                entrenador.getContacto(),
                entrenador.getEspecialidades()
            });
        }
    
      btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
      
      btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
      
      btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
      
      btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnID = new javax.swing.JLabel();
        btnNombre = new javax.swing.JLabel();
        btnConta = new javax.swing.JLabel();
        btnEspecialidades = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtContacto = new javax.swing.JTextField();
        txtID = new javax.swing.JFormattedTextField();
        txtEspecialidades = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        TbEntrenadores = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnMostrar = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Entrenador");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));

        btnID.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnID.setText("ID");
        btnID.setBorder(new javax.swing.border.MatteBorder(null));

        btnNombre.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnNombre.setText("Nombre");
        btnNombre.setBorder(new javax.swing.border.MatteBorder(null));

        btnConta.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnConta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnConta.setText("Contacto");
        btnConta.setBorder(new javax.swing.border.MatteBorder(null));

        btnEspecialidades.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEspecialidades.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEspecialidades.setText("Especialidades");
        btnEspecialidades.setBorder(new javax.swing.border.MatteBorder(null));

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        txtEspecialidades.setEditable(true);
        txtEspecialidades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Zumba", "Yoga", "Pilates", "Cardio", "" }));

        TbEntrenadores.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        TbEntrenadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Contacto", "Especialidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TbEntrenadores);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(btnID, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(txtContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(txtEspecialidades, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(btnConta, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEspecialidades)))
                .addGap(43, 43, 43))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnID)
                    .addComponent(btnNombre)
                    .addComponent(btnConta)
                    .addComponent(btnEspecialidades))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEspecialidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        btnAgregar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnMostrar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnMostrar.setText("Mostrar");
        btnMostrar.setToolTipText("");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(btnAgregar)
                .addGap(40, 40, 40)
                .addComponent(btnEliminar)
                .addGap(46, 46, 46)
                .addComponent(btnActualizar)
                .addGap(43, 43, 43)
                .addComponent(btnMostrar)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar)
                    .addComponent(btnMostrar))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
     try {
            String id = txtID.getText().trim();
            String nombre = txtNombre.getText().trim();
            String contacto = txtContacto.getText().trim();
            String especialidad = (String) txtEspecialidades.getSelectedItem();

            // Validar que todos los campos no estén vacíos
            if (id.isEmpty() || nombre.isEmpty() || contacto.isEmpty() || especialidad == null || especialidad.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return; // Salir del método si algún campo está vacío
            }

            // Validar que el ID sea un número entero
            int idInt;
            try {
                idInt = Integer.parseInt(id); // Intenta convertir el ID a un número entero
            } catch (NumberFormatException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return; // Salir del método si el ID no es un número
            }

            // Crear un nuevo objeto Entrenador
            Entrenador nuevoEntrenador = new Entrenador(idInt, nombre, contacto, especialidad);
            entrenadores.add(nuevoEntrenador);

            // Actualizar la tabla
            updateTable();
            
        // Limpiar los campos
        txtID.setText("");
        txtNombre.setText("");
        txtContacto.setText("");
        txtEspecialidades.setSelectedIndex(0);

        // Mostrar mensaje de éxito
        javax.swing.JOptionPane.showMessageDialog(this, "Entrenador agregado con éxito.", "Éxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar agregar el registro: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    
    }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       try {
        // Obtener el ID del campo de texto
        String id = txtID.getText().trim();

        // Validar que el campo ID no esté vacío
        if (id.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID para eliminar.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirmar eliminación con el usuario
        int confirmacion = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "¿Está seguro de que desea eliminar el registro con ID: " + id + "?",
                "Confirmación",
                javax.swing.JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
            int idInt = Integer.parseInt(id);
            boolean eliminado = false;

            // Buscar y eliminar el entrenador
            for (Entrenador entrenador : entrenadores) {
                if (entrenador.getId() == idInt) {
                    entrenadores.remove(entrenador);
                    eliminado = true;
                    break; // Salir del bucle una vez que se ha eliminado
                }
            }

            if (eliminado) {
                javax.swing.JOptionPane.showMessageDialog(this, "Registro eliminado con éxito.", "Éxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                updateTable(); // Actualizar la tabla
                // Limpiar campos
                txtID.setText("");
                txtNombre.setText("");
                txtContacto.setText("");
                txtEspecialidades.setSelectedIndex(0);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No se encontró el registro con ID: " + id, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (Exception ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar eliminar el registro: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
          try {
        String id = txtID.getText().trim();
        String nombre = txtNombre.getText().trim();
        String contacto = txtContacto.getText().trim();
        String especialidad = (String) txtEspecialidades.getSelectedItem();

        if (id.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID para actualizar.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (nombre.isEmpty() || contacto.isEmpty() || especialidad == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos antes de actualizar.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idInt = Integer.parseInt(id);
        boolean actualizado = false;

        // Buscar y actualizar el entrenador
        for (Entrenador entrenador : entrenadores) {
            if (entrenador.getId() == idInt) {
                entrenador.setNombre(nombre);
                entrenador.setContacto(contacto);
                entrenador.setEspecialidades(especialidad);
                actualizado = true;
                break; // Salir del bucle una vez que se ha actualizado
            }
        }

        if (actualizado) {
            javax.swing.JOptionPane.showMessageDialog(this, "Registro actualizado con éxito.", "Éxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            updateTable(); // Actualizar la tabla
            // Limpiar los campos
            txtID.setText("");
            txtNombre.setText("");
            txtContacto.setText("");
            txtEspecialidades.setSelectedIndex(0);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "No se encontró el registro con ID: " + id, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar actualizar el registro: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
    String idStr = txtID.getText().trim();

    if (idStr.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID del entrenador.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }
    try {
        int id = Integer.parseInt(idStr); // Convertir el ID a entero

        // Buscar el entrenador en la lista
        for (Entrenador entrenador : entrenadores) {
            if (entrenador.getId() == id) { // Comparar como enteros
                // Si se encuentra, mostrar los datos en los campos
                txtNombre.setText(entrenador.getNombre());
                txtContacto.setText(entrenador.getContacto());
                txtEspecialidades.setSelectedItem(entrenador.getEspecialidades());
                return;
            }
        }
        javax.swing.JOptionPane.showMessageDialog(this, "No se encontró un entrenador con ID: " + id, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } catch (NumberFormatException e) {
        javax.swing.JOptionPane.showMessageDialog(this, "El ID debe ser un número entero.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnMostrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TbEntrenadores;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JLabel btnConta;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel btnEspecialidades;
    private javax.swing.JLabel btnID;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JLabel btnNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtContacto;
    private javax.swing.JComboBox<String> txtEspecialidades;
    private javax.swing.JFormattedTextField txtID;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
